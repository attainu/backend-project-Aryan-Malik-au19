<main>
    <div class="container" style="max-width: 100%;">
        <div class="header">
            <div class="title">
                <img src="./icon/logo.svg" style='filter: invert(100%);' width="110px">
            </div>
            <a href="/logout" class="logout">
                Logout
            </a>
            <button type="button" class="dropdown" onclick="show_hide()">
                <span class="material-icons menu">
                    menu
                </span>
            </button>
        </div>
        <div class="chat-window">
            <div class="users-window">
                <div class="users-head">
                    <h5>Active Now</h5>
                    <h5 class="users-count">3</h5>
                </div>
                <div class="users-list">
                </div>
            </div>
            <div class="chat-box">
                <div class="chats">
                </div>
                <div class="user-input">
                    <input id="user-msg" type="text" placeholder="Type a message...">
                    <button type="button" id="user-send"><span class="material-icons">
                            send
                        </span>
                    </button>
                </div>
            </div>
        </div>
</main>

<script src="/socket.io/socket.io.js">
</script>

<script>
    var user_data;
    var receiverId;
    const socket = io()
    const uwindow = document.querySelector('.users-window');
    const chats = document.querySelector(".chats")
    const user_list = document.querySelector(".users-list")
    const user_count = document.querySelector(".users-count")
    const msg_send = document.querySelector("#user-send")
    const user_msg = document.querySelector("#user-msg")
    const cookie = document.cookie


    if (cookie.includes(`email`)) {
        console.log(cookie)
        socket.emit("new-user-joined", `{{ username }}`)
    }
    else {
        window.location.href = "/"

    }

    function show_hide() {
        if (uwindow.style.display == 'block') {
            uwindow.style.display = 'none';
        }
        else {
            uwindow.style.display = 'block';
        }
    }

    function userJoinLeft(name, status) {
        const div = document.createElement("div")
        div.classList.add("user-join")
        let content = `<p><b>${name}</b> ${status} the chat</p>`;
        div.innerHTML = content;
        chats.appendChild(div)
        chats.scrollTop = chats.scrollHeight;
    }



    msg_send.addEventListener("click", () => {
        let data = {
            user: `{{ username }}`,
            msg: user_msg.value
        };
        if (user_msg.value != '') {
            console.log(receiverId)
            if (receiverId) {
                data['to'] = receiverId
                appendMessage(data, "outgoing")
                socket.emit('private-message', data)
                user_msg.value = ''
            }
            else {
                appendMessage(data, "outgoing")
                socket.emit("message", data)
                user_msg.value = ''
            }
        }
    })

    function getTime() {
        var date = new Date();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;

        return strTime
    }

    function appendMessage(data, status) {
        let div = document.createElement('div')
        div.classList.add('message', status);
        time = getTime()
        let content = `
        <div class="user_message">
        <h5>${data.msg}</h5>
        <h6>${data.user} <br>${time}</h6>
        </div>
            `;
        div.innerHTML = content;
        chats.appendChild(div);
        chats.scrollTop = chats.scrollHeight;
    }


    socket.on('user-connected', (socket_name) => {
        userJoinLeft(socket_name, "joined")
    })

    socket.on('user-disconnected', (user) => {
        userJoinLeft(user, "left")
    })

    socket.on('user-list', (users) => {
        user_data = users
        user_list.innerHTML = ""
        users_arr = Object.keys(users)
        for (i = 0; i < users_arr.length; i++) {
            let div = document.createElement('div');
            div.classList.add("user-data");
            div.setAttribute('onclick', 'privateChat(this)')
            div.innerHTML = `${users_arr[i]} <img src="./icon/active.svg" style='filter: invert(50%) sepia(100%) 
            saturate(1000%) hue-rotate(87deg) brightness(200%) blur(1.5px);' width="15px">`;
            user_list.appendChild(div);
        }
        user_count.innerHTML = users_arr.length;
    })

    function privateChat(Udata) {
        let status;
        if (receiverId) {
            status = 'ended'
            Udata.style.backgroundColor = "transparent";
            receiverId = null
        }
        else {
            status = "started"
            Udata.style.backgroundColor = "#196c628e";
            receiverId = user_data[Udata.innerText]
        }
        const div = document.createElement("div")
        div.classList.add("user-join")
        let content = `Private Chat with ${Udata.innerText} ${status}`;
        div.innerHTML = content;
        chats.appendChild(div)
        chats.scrollTop = chats.scrollHeight;
    }

    socket.on('message', (data) => {
        appendMessage(data, "incoming")
    })

    socket.on('private-message', (data) => {
        appendMessage(data, "incoming")
    })

</script>